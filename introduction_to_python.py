# -*- coding: utf-8 -*-
"""Introduction to Python

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e2hONK-6urcBo15vZ-FIIJHm5K6QDt7t

#Introduction to Python

---

# Data types
"""

a = 1 # integer
print(a)
b = 1.1 # float
print(b)
c = 1 + 2j # complex number (a + bi)
print(c)
d = 'a' # string
print(d)
e = True # boolean (True / False)
print(e)

#print type
type(e)

a = 5 * 3
print(a)
b = 5 ** 3
print(b)
c = 5 / 3
print(c)
d = 5 // 3  #integer division--sort of like a floor of the original division (5/3)
print(d)

"""# Input & Type Conversion"""

#keep in mind that input() always returns a string
x = input("Enter a number : ")
print(x)

"""# Strings"""

x = 'Python'
print(len(x))
print(x[0])
print(x[-1])
x[0:3]

x[5]

len()

name = "John"
print("Hello, %s!" % name)
age = 23
print("%s is %d years old." % (name, age))

# Escape sequences
#\” \’ \\ \n

"""Note on 'find' method:

The find() method finds the first occurrence of the specified value.

The find() method returns -1 if the value is not found.

string.find(value, start, end)
"""

# String methods
print(x.upper())
print(x.lower())
print(x.title())   #first character in each word to Uppercase and remaining characters to Lowercase in string and returns new string
print(x.strip('n'))
print(x.find('P'))
print(x.replace('o', 'b'))
'a' in x

"""# If-else Conditions"""

x = 3
if (x == 1):
  print(1)
elif (x == 2):
  print(2)
else:
  print(3)

"""# Loops

Range function: returns a range object, which is nothing but a sequence of integers.
Syntax: range(start,end,step)
* end is exclusive
* start is inclusive
"""

for n in range(5):
  print(n)

n = 1
while (n < 10):
  print(n)
  n += 1

"""# Functions"""

def my_function(firstname, lastname):
  print("My name is " + firstname + " " + lastname)


my_function("Emil", "Refsnes")

def increment(number, by):
  return number + by

n = 1
while (n < 10):
  print(n)
  n = increment(n, by=1)

"""#Lists:


*   ordered
*   mutable
*   can hold a mixture of data types
*   no need to declare size beforehand

Creating lists
"""

#the simplest way; we'll see more later
letters = ["a", "b", "c"]
letters

list = [1, 'c', 5.5]
print(list)

"""Accessing items in lists"""

letters = ["a", "b", "c", "d"]
letters[0] # "a"
letters[2]

"""Slicing lists:
* Notation: (start: end: increment)
"""

print(letters[0:3]) # "a", "b", "c"
print(letters[:3]) # "a", "b", "c"
print(letters[0:]) # "a", "b", "c", "d"
print(letters[:]) # "a", "b", "c", "d"
print(letters[::2]) # "a", "c"
print(letters[::-1]) # "d", "c", "b", "a"

print(len(letters))
print(letters[-1:-5:-1])

"""Some other ways to create lists"""

matrix = [[0, 1,3], [1, 2,4], [3,4,5]]
matrix

import numpy
numpy.shape(matrix)

zeros = [0] * 7
zeros

combined = zeros + letters
combined

numbers = list(range(20))
numbers

"""Adding items"""

letters1 = ["a", "b", "c"]
letters1.append("e")
letters1[::-1]

letters1

letters1.insert(1, "-")

letters1

"""Removing items"""

letters1.pop()

letters1.pop(0)

letters1.remove("b")
letters1

del letters1[0:3]

"""Finding items"""

letters = ["a", "b", "c", "d"]
if "b" in letters:
  print(letters.index("b"))

# Looping over lists
for letter in letters:
  print(letter)

# Unpacking
letters = ["a", "b", "c", "d", "e"]
first, second, *other = letters     #   * denotes a pointer which points to several addresses of the list
print(first)
print(second)
print(*other)

"""enumerate: returns an enumerate object. In our case that object is a list of tuples, each containing a pair of count/index and value."""

for index, letter in enumerate(letters):
  print(index, end = " ")
  print(letter)

# Sorting lists in place. They do not return a new list.
letters.sort()
letters.sort(reverse=True)
#returns a new list
sorted(letters)

#list with different data types.
x = [1,"ball", 3.3]
for i in x:
  print(i)

"""# Dictionaries
--contain a key-value pair
"""

point = {"x": 1, "y": 2}
point

point[10] = "z"
point

if 2 in point:
  print("found")
else:
  print("not found")

del point["x"]

point

alphabets = {'a':'apple','b':'ball','c': 'cat'} #dictionary

print(alphabets['a'])

alphabets['d'] = 'dog' #adding to a dictionary  #if the key already exists, value will be overwritten

alphabets

"""dict.items(): A view object that displays a list of a given dictionary’s (key, value) tuple pair."""

for key, value in point.items():
  print(key,value)

x = {"A":[1,2,3,4],"B":2, "C":3}
x["A"]



"""# Tuples

Tuples cannot be updated; they are said to be immutable
"""

point = (1, 2, 3)

point[0]

#

point[0] = 9
point

point[0:2] # (1, 2)

x, y, z = point
print("x:"+str(x))
if 1 in point:
  print("found")

# Swapping variables
x = 10
y = 11
x, y = y, x
print(x,y)

"""# Sets

You cannot access items in a set by referring to an index. Since sets are unordered, the items have no index. But you can loop through the set items using a **for** loop, or ask if a specified value is present in a set by using the **in** keyword.
Remember: Sets are unordered
"""



vowels = {'a', 'e', 'i','i','i', 'o', 'u','u'} #set

print(vowels)   #unordered and unique values

first = {1, 2, 3, 4}
second = {1, 5}

first | second # {1, 2, 3, 4, 5}

first & second # {1}

first - second # {2, 3, 4}

first ^ second # {2, 3, 4, 5}

if 1 in first:
  print("found one")

"""#Lambda Function:
Syntax:
* lambda arguments : expression
* can take any number of arguments, but can only have one expression



"""

x = lambda a : a + 10
print(x(5))

x = lambda a, b : a * b
print(x(10, 3))

x = lambda a, b, c : a + b + c
print(x(5, 6, 2))

def x(a):
  return a+10

print(x(5))

